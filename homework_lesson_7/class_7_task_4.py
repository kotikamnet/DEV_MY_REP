'''
Сделать декоратор, который измеряет время, затраченное на выполнение декорируемой функции.
'''

import time


# Задаем декоратор
def time_decorator(func):
    # Эта обёртка (wrapper) добавляет действия перед и после выполнения функции
    def wrapper(*args, **kwargs):
        # Засекаем время начала выполнения функции
        start = time.time()
        # Выполняем функцию
        result = func(*args, **kwargs)
        # Засекаем время окончания выполнения функции
        end = time.time()
        # Считаем разницу и получаем длительность выполнения
        duration = end - start
        # Выводим результат и округляем до 5 знаков после запятой с помощью .5f
        print(f'Функция выполнилась за {duration:.5f} секунд')
        # Возвращаем результат функции
        return result

    return wrapper


# Используем декоратор для функции
@time_decorator
# Берем функцию с подсчетом посложнее, чтобы увеличить время для наглядности
# Вычислим сумму всех чисел от 0 до n-1
def calculate_sum(n):
    total_sum = 0
    for number in range(n):  # Проходим по всем числам от 0 до n-1
        total_sum += number  # Добавляем текущее число к сумме
    return total_sum  # Возвращаем общую сумму


# Вызываем функцию и выводим результат
result = calculate_sum(10 ** 6)  # Передаём число 10^6 (миллион) в функцию
print(f"Результат: {result}")  # Выводим результат вычислений
